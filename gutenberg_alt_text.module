<?php

/**
 * @file
 * Gutenberg Alt Text Enhancement - Update-resistant implementation.
 */

use Drupal\Core\Config\ConfigFactoryInterface;
use Drupal\Core\Logger\LoggerChannelFactoryInterface;

/**
 * Implements hook_gutenberg_editor_assets().
 */
function gutenberg_alt_text_gutenberg_editor_assets() {
  $config = \Drupal::config('gutenberg_alt_text.settings');
  
  // Only load if enabled and compatible
  if ($config->get('enabled') && gutenberg_alt_text_is_compatible()) {
    \Drupal::logger('gutenberg_alt_text')->info('Loading Gutenberg Alt Text editor assets');
    return ['gutenberg_alt_text/alt_text_enhancement'];
  }
  
  return [];
}

/**
 * Check if our enhancements are compatible with current Gutenberg version.
 */
function gutenberg_alt_text_is_compatible() {
  // During installation, assume compatible to avoid errors
  if (!\Drupal::hasService('config.factory')) {
    return TRUE;
  }
  
  try {
    $config = \Drupal::config('gutenberg_alt_text.settings');
    $status = $config->get('compatibility_status');
    
    // If we've already determined incompatibility, respect that
    if ($status === 'incompatible') {
      return FALSE;
    }
    
    // If status is unknown or we haven't checked recently, run tests
    if ($status !== 'compatible' || gutenberg_alt_text_needs_compatibility_check()) {
      $compatible = gutenberg_alt_text_run_compatibility_tests();
      
      \Drupal::configFactory()->getEditable('gutenberg_alt_text.settings')
        ->set('compatibility_status', $compatible ? 'compatible' : 'incompatible')
        ->set('last_compatibility_check', time())
        ->save();
      
      return $compatible;
    }
    
    return TRUE;
  } catch (Exception $e) {
    // If anything goes wrong, assume compatible to avoid breaking installation
    return TRUE;
  }
}

/**
 * Check if we need to run compatibility tests.
 */
function gutenberg_alt_text_needs_compatibility_check() {
  $config = \Drupal::config('gutenberg_alt_text.settings');
  $last_check = $config->get('last_compatibility_check');
  
  // Check weekly or if never checked
  return !$last_check || (time() - $last_check) > (7 * 24 * 60 * 60);
}

/**
 * Run comprehensive compatibility tests.
 */
function gutenberg_alt_text_run_compatibility_tests() {
  try {
    $logger = \Drupal::logger('gutenberg_alt_text');
    
    // Test 1: Check if Gutenberg module is available
    if (!\Drupal::moduleHandler()->moduleExists('gutenberg')) {
      $logger->warning('Compatibility test failed: Gutenberg module not available');
      return FALSE;
    }
    
    // Test 2: Check if we can access Gutenberg services
    try {
      $gutenberg_blocks_renderer = \Drupal::service('gutenberg.blocks_renderer');
      if (!$gutenberg_blocks_renderer) {
        $logger->warning('Compatibility test failed: Gutenberg blocks renderer service not available');
        return FALSE;
      }
    } catch (Exception $e) {
      $logger->warning('Compatibility test failed: Cannot access Gutenberg services: @message', ['@message' => $e->getMessage()]);
      return FALSE;
    }
    
    // Test 3: Check if we can use DOMDocument for HTML processing
    if (!class_exists('DOMDocument')) {
      $logger->warning('Compatibility test failed: DOMDocument class not available');
      return FALSE;
    }
    
    $logger->info('Compatibility tests passed');
    return TRUE;
  } catch (Exception $e) {
    // If anything goes wrong during testing, assume compatible
    return TRUE;
  }
}

/**
 * Implements hook_gutenberg_render_block_alter().
 * 
 * This hook is called for all Gutenberg blocks during rendering.
 */
function gutenberg_alt_text_gutenberg_render_block_alter(&$block_content, $block) {
  $config = \Drupal::config('gutenberg_alt_text.settings');
  
  // Only process if module is enabled
  if (!$config->get('enabled')) {
    return;
  }
  
  // Process Cover blocks
  if ($block['blockName'] === 'core/cover' && $config->get('enable_cover')) {
    $alt_text = $block['attrs']['alt'] ?? '';
    if (!empty($alt_text)) {
      $block_content = gutenberg_alt_text_add_alt_to_content($block_content, $alt_text, 'cover');
    }
  }
  
  // Process Gallery blocks
  if ($block['blockName'] === 'core/gallery' && $config->get('enable_gallery')) {
    $alt_text = $block['attrs']['alt'] ?? '';
    if (!empty($alt_text)) {
      $block_content = gutenberg_alt_text_add_alt_to_content($block_content, $alt_text, 'gallery');
    }
  }
}

/**
 * Safely add alt text to block content.
 */
function gutenberg_alt_text_add_alt_to_content($content, $alt_text, $block_type) {
  if (empty($alt_text) || strpos($content, '<img') === FALSE) {
    return $content;
  }
  
  $logger = \Drupal::logger('gutenberg_alt_text');
  
  // Method 1: Try DOMDocument (preferred for Drupal)
  if (class_exists('DOMDocument')) {
    try {
      $dom = new DOMDocument();
      $dom->loadHTML('<?xml encoding="UTF-8">' . $content, LIBXML_HTML_NOIMPLIED | LIBXML_HTML_NODEFDTD);
      
      $images = $dom->getElementsByTagName('img');
      $found_image = FALSE;
      
      foreach ($images as $img) {
        $img->setAttribute('alt', $alt_text);
        $found_image = TRUE;
      }
      
      if ($found_image) {
        $logger->debug('Successfully added alt text using DOMDocument');
        return $dom->saveHTML();
      }
    } catch (Exception $e) {
      $logger->warning('DOMDocument failed: @message', ['@message' => $e->getMessage()]);
    }
  }
  
  // Method 2: Fallback to regex (less reliable but more compatible)
  $escaped_alt = htmlspecialchars($alt_text, ENT_QUOTES, 'UTF-8');
  $pattern = '/(<img[^>]*?)(?:\s+alt\s*=\s*["\'][^"\']*["\'])?([^>]*>)/i';
  $replacement = '$1 alt="' . $escaped_alt . '"$2';
  
  $result = preg_replace($pattern, $replacement, $content);
  
  if ($result !== $content) {
    $logger->debug('Successfully added alt text using regex fallback');
  } else {
    $logger->warning('Failed to add alt text to @block_type block', ['@block_type' => $block_type]);
  }
  
  return $result;
}

/**
 * Implements hook_install().
 */
function gutenberg_alt_text_install() {
  // Set default configuration
  \Drupal::configFactory()->getEditable('gutenberg_alt_text.settings')
    ->set('enabled', TRUE)
    ->set('enable_cover', TRUE)
    ->set('enable_gallery', TRUE)
    ->set('compatibility_status', 'unknown')
    ->set('last_compatibility_check', 0)
    ->save();
}

/**
 * Implements hook_init().
 */
function gutenberg_alt_text_init() {
  // Clear cache if compatibility status changed
  $config = \Drupal::config('gutenberg_alt_text.settings');
  if ($config->get('compatibility_status') === 'incompatible' && gutenberg_alt_text_is_compatible()) {
    \Drupal::configFactory()->getEditable('gutenberg_alt_text.settings')
      ->set('compatibility_status', 'compatible')
      ->save();
    drupal_set_message(t('Gutenberg Alt Text module is now compatible and enabled.'));
  }
}

/**
 * Debug function to check module status.
 * Call this via drush: drush eval "gutenberg_alt_text_debug_status();"
 */
function gutenberg_alt_text_debug_status() {
  echo "Gutenberg Alt Text Debug Status:\n";
  
  try {
    $config = \Drupal::config('gutenberg_alt_text.settings');
    $logger = \Drupal::logger('gutenberg_alt_text');
    
    $status = [
      'enabled' => $config->get('enabled'),
      'compatibility_status' => $config->get('compatibility_status'),
      'last_compatibility_check' => $config->get('last_compatibility_check'),
      'enable_cover' => $config->get('enable_cover'),
      'enable_gallery' => $config->get('enable_gallery'),
      'is_compatible' => gutenberg_alt_text_is_compatible(),
      'gutenberg_module_exists' => \Drupal::moduleHandler()->moduleExists('gutenberg'),
      'gutenberg_blocks_renderer_service' => \Drupal::hasService('gutenberg.blocks_renderer'),
      'domdocument_available' => class_exists('DOMDocument'),
    ];
    
    foreach ($status as $key => $value) {
      echo "- $key: " . (is_bool($value) ? ($value ? 'TRUE' : 'FALSE') : $value) . "\n";
    }
    
    $logger->info('Gutenberg Alt Text Debug Status: @status', ['@status' => print_r($status, TRUE)]);
    
    return $status;
  } catch (Exception $e) {
    echo "Error: " . $e->getMessage() . "\n";
    return FALSE;
  }
}
